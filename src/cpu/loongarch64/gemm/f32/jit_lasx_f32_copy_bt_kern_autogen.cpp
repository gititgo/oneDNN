/*******************************************************************************
* Copyright 2019-2021 Intel Corporation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

#include "cpu/loongarch64/jit_generator.hpp"

#include "cpu/loongarch64/gemm/f32/common_f32.hpp"

namespace dnnl {
namespace impl {
namespace cpu {
namespace loongarch64 {

jit_lasx_f32_copy_bt_kern::jit_lasx_f32_copy_bt_kern()
    : jit_generator(nullptr, F32_COPY_KERNEL_CODE_SIZE) {}

void jit_lasx_f32_copy_bt_kern::generate() {

#ifndef _WIN32
#define M a3    //rdi
#define N a4    //rsi
#define A a5    //rdx
#define LDA a6  //rcx
#define ALPHA a7    //r8
#define B t4    //r9

#define I t5    //rax
#define A1 t6   //r10
#define A2 a7   //r8
#define LDA3 t7 //r11
#define TM s1
#define TM0 s0

//#else
//#define M rcx
//#define N rdx
//#define A r8
//#define LDA r9
//#define ALPHA rsi
//#define B rdi
//#define I rax
//#define A1 rsi
//#define A2 r10
//#define LDA3 r11

//#define ARG_ALPHA 40 + stacksize + rsp
//#define ARG_B 48 + stacksize + rsp

#endif

    inLocalLabel();
    {
        //std::vector<Xbyak::Label> labels(59);
        std::vector<Xbyak_loongarch::Label> labels(59);
        preamble();
/*
#ifdef _WIN32
        auto stacksize = get_size_of_abi_save_regs();
        mov(ALPHA, ptr[ARG_ALPHA]);
        mov(B, ptr[ARG_B]);
#endif
*/
        //mov(M, qword[M]);
        ld_d(M, M, 0);
        //mov(N, qword[N]);
        ld_d(N, N, 0);
        //mov(LDA, qword[LDA]);
        ld_d(LDA, LDA, 0);
        //sub(A, -128);
        addi_d(A, A, 128);
        //sub(B, -128);
        addi_d(B, B, 128);
        //shl(LDA, 0x2);
        slli_d(LDA, LDA, 0x2);
        //lea(LDA3, ptr[LDA + LDA * 2]);
        mov_imm(TM, 3);
        mul_d(LDA3, LDA, TM);
        //vbroadcastss(ymm6, dword[ALPHA]);
        xvldrepl_w(xr6, ALPHA, 0);
        //vpcmpeqb(xmm3, xmm3, xmm3);
        vseq_b(vr3, vr3, vr3);
        //vpsrld(xmm3, xmm3, 0x17);
        vsrli_w(vr3, vr3, 0x17);
        //vpslld(xmm3, xmm3, 0x19);
        vslli_w(vr3, vr3, 0x19);
        //vpsrld(xmm3, xmm3, 0x2);
        vsrli_w(vr3, vr3, 0x2);
        //vpcmpeqb(xmm4, xmm4, xmm4);
        vseq_b(vr4, vr4, vr4);
        //vpslld(xmm4, xmm4, 0x1f);
        vslli_w(vr4, vr4, 0x1f);
        //vperm2f128(ymm4, ymm4, ymm4, 0x20);
        xvpermi_q(xr4, xr4, 0x20);
        //vucomiss(xmm6, xmm3);
        vfcmp_cne_s(vr31, vr6, vr3);
        vpickve2gr_w(TM, vr31, 0);
        //jne(labels[42], T_NEAR);
        bnez(TM, labels[42]);
        //cmp(N, 0x4);
        mov_imm(TM, 0x4);
        //jl(labels[55], T_NEAR);
        blt(N, TM, labels[55]);
        //align(4);

        L(labels[36]);
        //mov(A1, A);
        add_d(A1, A, zero);
        //lea(A2, ptr[A1 + LDA * 4]);
        mov_imm(TM, 4);
        mul_d(TM, LDA, TM);
        add_d(A2, A1, TM);
        //add(A, 0x10);
        addi_d(A, A, 0x10);
        //mov(I, M);
        add_d(I, M, zero);
        //sar(I, 0x3);
        srli_d(I, I, 0x3);
        //jle(labels[0], T_NEAR);
        bge(zero, I, labels[0]);
        //align(4);

        L(labels[30]);
        //vmovups(xmm0, xword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vmovups(xword[B - 0x80], xmm0);
        vst(vr0, B, -0x80);
        //vmovups(xmm0, xword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        vld(vr0, TM, -0x80);
        //vmovups(xword[B - 0x70], xmm0);
        vst(vr0, B, -0x70);
        //vmovups(xmm0, xword[A1 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        vld(vr0, TM, -0x80);
        //vmovups(xword[B - 0x60], xmm0);
        vst(vr0, B, -0x60);
        //vmovups(xmm0, xword[A1 + LDA3 * 1 - 0x80]);
        add_d(TM, A1, LDA3);
        vld(vr0, TM, -0x80);
        //vmovups(xword[B - 0x50], xmm0);
        vst(vr0, B, -0x50);
        //vmovups(xmm0, xword[A2 - 0x80]);
        vld(vr0, A2, -0x80);
        //vmovups(xword[B - 0x40], xmm0);
        vst(vr0, B, -0x40);
        //vmovups(xmm0, xword[A2 + LDA * 1 - 0x80]);
        add_d(TM, A2, LDA);
        vld(vr0, TM, -0x80);
        //vmovups(xword[B - 0x30], xmm0);
        vst(vr0, B, -0x30);
        //vmovups(xmm0, xword[A2 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        vld(vr0, TM, -0x80);
        //vmovups(xword[B - 0x20], xmm0);
        vst(vr0, B, -0x20);
        //vmovups(xmm0, xword[A2 + LDA3 * 1 - 0x80]);
        add_d(TM, A2, LDA3);
        vld(vr0, TM, -0x80);
        //vmovups(xword[B - 0x10], xmm0);
        vst(vr0, B, -0x10);
        //lea(A1, ptr[A1 + LDA * 8]);
        mov_imm(TM, 8);
        mul_d(TM, TM, LDA);
        add_d(A1, A1, TM);
        //lea(A2, ptr[A2 + LDA * 8]);
        add_d(A2, A2, TM);
        //sub(B, -128);
        addi_d(B, B, 128);
        //dec(I);
        addi_d(I, I, -1);
        //jg(labels[30], T_NEAR);
        blt(zero, I, labels[30]);
        //align(4);

        L(labels[0]);
        //test(M, 0x4);
        andi(TM, M, 0x4);
        //jle(labels[58], T_NEAR);
        bge(zero, TM, labels[58]);
        //vmovups(xmm0, xword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vmovups(xword[B - 0x80], xmm0);
        vst(vr0, B, -0x80);
        //vmovups(xmm0, xword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        vld(vr0, TM, -0x80);
        //vmovups(xword[B - 0x70], xmm0);
        vst(vr0, B, -0x70);
        //vmovups(xmm0, xword[A1 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        vld(vr0, TM, -0x80);
        //vmovups(xword[B - 0x60], xmm0);
        vst(vr0, B, -0x60);
        //vmovups(xmm0, xword[A1 + LDA3 * 1 - 0x80]);
        add_d(TM, A1, LDA3);
        vld(vr0, TM, -0x80);
        //vmovups(xword[B - 0x50], xmm0);
        vst(vr0, B, -0x50);
        //lea(A1, ptr[A1 + LDA * 4]);
        mov_imm(TM, 4);
        mul_d(TM, TM, LDA);
        add_d(A1, A1, TM);
        //sub(B, -64);
        addi_d(B, B, 64);
        //align(4);

        L(labels[58]);
        //test(M, 0x2);
        andi(TM, M, 0x2);
        //jle(labels[57], T_NEAR);
        bge(zero, TM, labels[57]);
        //vmovups(xmm0, xword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vmovups(xword[B - 0x80], xmm0);
        vst(vr0, B, -0x80);
        //vmovups(xmm0, xword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        vld(vr0,TM, -0x80);
        //vmovups(xword[B - 0x70], xmm0);
        vst(vr0, B, -0x70);
        //lea(A1, ptr[A1 + LDA * 2]);
        add_d(A1, TM, LDA);
        //sub(B, -32);
        addi_d(B, B, 32);
        //align(4);

        L(labels[57]);
        //test(M, 0x1);
        andi(TM, M, 0x1);
        //jle(labels[56], T_NEAR);
        bge(zero, TM, labels[56]);
        //vmovups(xmm0, xword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vmovups(xword[B - 0x80], xmm0);
        vst(vr0, B, -0x80);
        //sub(B, -16);
        addi_d(B, B, 16);
        //align(4);

        L(labels[56]);
        //sub(N, 0x4);
        addi_d(N, N, -0x4);
        //cmp(N, 0x4);
        mov_imm(TM, 0x4);
        //jge(labels[36], T_NEAR);
        bge(N, TM, labels[36]);
        //align(4);

        L(labels[55]);
        //cmp(N, 0x2);
        mov_imm(TM, 0x2);
        //jl(labels[49], T_NEAR);
        blt(N, TM, labels[49]);
        //mov(A1, A);
        add_d(A1, A, zero);
        //lea(A2, ptr[A1 + LDA * 4]);
        mov_imm(TM, 4);
        mul_d(TM, TM, LDA);
        add_d(A2, A1, TM);
        //add(A, 0x8);
        addi_d(A, A, 0x8);
        //mov(I, M);
        add_d(I, M, zero);
        //sar(I, 0x3);
        srai_d(I, I, 0x3);
        //jle(labels[53], T_NEAR);
        bge(zero, I, labels[53]);
        //align(4);

        L(labels[54]);
        //vmovsd(xmm0, qword[A1 - 0x80]);
        ld_d(TM0, A1, -0x80);
        //vmovlps(qword[B - 0x80], xmm0);
        st_d(TM0, B, -0x80);
        //vmovsd(xmm0, qword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        ld_d(TM0, TM, -0x80);
        //vmovlps(qword[B - 0x78], xmm0);
        st_d(TM0, B, -0x78);
        //vmovsd(xmm0, qword[A1 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        ld_d(TM0, TM, -0x80);
        //vmovlps(qword[B - 0x70], xmm0);
        st_d(TM0, B, -0x70);
        //vmovsd(xmm0, qword[A1 + LDA3 * 1 - 0x80]);
        add_d(TM, A1, LDA3);
        ld_d(TM0, TM, -0x80);
        //vmovlps(qword[B - 0x68], xmm0);
        st_d(TM0, B, -0x68);
        //vmovsd(xmm0, qword[A2 - 0x80]);
        ld_d(TM0, A2, -0x80);
        //vmovlps(qword[B - 0x60], xmm0);
        st_d(TM0, B, -0x60);
        //vmovsd(xmm0, qword[A2 + LDA * 1 - 0x80]);
        add_d(TM, A2, LDA);
        ld_d(TM0, TM, -0x80);
        //vmovlps(qword[B - 0x58], xmm0);
        st_d(TM0, B, -0x58);
        //vmovsd(xmm0, qword[A2 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        ld_d(TM0, TM, -0x80);
        //vmovlps(qword[B - 0x50], xmm0);
        st_d(TM0, B, -0x50);
        //vmovsd(xmm0, qword[A2 + LDA3 * 1 - 0x80]);
        add_d(TM, A2, LDA3);
        ld_d(TM0, TM, -0x80);
        //vmovlps(qword[B - 0x48], xmm0);
        st_d(TM0, B, -0x48);
        //lea(A1, ptr[A1 + LDA * 8]);
        mov_imm(TM, 8);
        mul_d(TM, TM, LDA);
        add_d(A1, A1, TM);
        //lea(A2, ptr[A2 + LDA * 8]);
        add_d(A2, A2, TM);
        //sub(B, -64);
        addi_d(B, B, 64);
        //dec(I);
        addi_d(I, I, -1);
        //jg(labels[54], T_NEAR);
        blt(zero, I, labels[54]);
        //align(4);

        L(labels[53]);
        //test(M, 0x4);
        andi(TM, M, 0x4);
        //jle(labels[52], T_NEAR);
        bge(zero, TM, labels[52]);
        //vmovsd(xmm0, qword[A1 - 0x80]);
        ld_d(TM0, A1, -0x80);
        //vmovlps(qword[B - 0x80], xmm0);
        st_d(TM0, B, -0x80);
        //vmovsd(xmm0, qword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        ld_d(TM0, TM, -0x80);
        //vmovlps(qword[B - 0x78], xmm0);
        st_d(TM0, B, -0x78);
        //vmovsd(xmm0, qword[A1 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        ld_d(TM0, TM, -0x80);
        //vmovlps(qword[B - 0x70], xmm0);
        st_d(TM0, B, -0x70);
        //vmovsd(xmm0, qword[A1 + LDA3 * 1 - 0x80]);
        add_d(TM, A1, LDA3);
        ld_d(TM0, TM, -0x80);
        //vmovlps(qword[B - 0x68], xmm0);
        st_d(TM0, B, -0x68);
        //lea(A1, ptr[A1 + LDA * 4]);
        mov_imm(TM, 4);
        mul_d(TM, TM, LDA);
        add_d(A1, A1, TM);
        //sub(B, -32);
        addi_d(B, B, 32);
        //align(4);

        L(labels[52]);
        //test(M, 0x2);
        andi(TM, M, 0x2);
        //jle(labels[51], T_NEAR);
        bge(zero, TM, labels[51]);
        //vmovsd(xmm0, qword[A1 - 0x80]);
        ld_d(TM0, A1, -0x80);
        //vmovlps(qword[B - 0x80], xmm0);
        st_d(TM0, B, -0x80);
        //vmovsd(xmm0, qword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        ld_d(TM0, TM, -0x80);
        //vmovlps(qword[B - 0x78], xmm0);
        st_d(TM0, B, -0x78);
        //lea(A1, ptr[A1 + LDA * 2]);
        add_d(A1, TM, LDA);
        //sub(B, -16);
        addi_d(B, B, 16);
        //align(4);

        L(labels[51]);
        //test(M, 0x1);
        andi(TM, M, 0x1);
        //jle(labels[50], T_NEAR);
        bge(zero, TM, labels[50]);
        //vmovsd(xmm0, qword[A1 - 0x80]);
        ld_d(TM0, A1, -0x80);
        //vmovlps(qword[B - 0x80], xmm0);
        st_d(TM0, B, -0x80);
        //sub(B, -8);
        addi_d(B, B, 8);
        //align(4);

        L(labels[50]);
        //sub(N, 0x2);
        addi_d(N, N, -0x2);
        //align(4);

        L(labels[49]);
        //cmp(N, 0x1);
        mov_imm(TM, 0x1);
        //jl(labels[43], T_NEAR);
        blt(N, TM, labels[43]);
        //mov(A1, A);
        add_d(A1, zero, A);
        //lea(A2, ptr[A1 + LDA * 4]);
        mov_imm(TM, 4);
        mul_d(TM, TM, LDA);
        add_d(A2, A1, TM);
        //add(A, 0x4);
        addi_d(A, A, 0x4);
        //mov(I, M);
        add_d(I, zero, M);
        //sar(I, 0x3);
        srai_d(I, I, 0x3);
        //jle(labels[47], T_NEAR);
        bge(zero, I, labels[47]);
        //align(4);

        L(labels[48]);
        //vmovss(xmm0, dword[A1 - 0x80]);
        ld_w(TM0, A1, -0x80);
        //vmovss(dword[B - 0x80], xmm0);
        st_w(TM0, B, -0x80);
        //vmovss(xmm0, dword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        ld_w(TM0, TM, -0x80);
        //vmovss(dword[B - 0x7c], xmm0);
        st_w(TM0, B, -0x7c);
        //vmovss(xmm0, dword[A1 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        ld_w(TM0, TM, -0x80);
        //vmovss(dword[B - 0x78], xmm0);
        st_w(TM0, B, -0x78);
        //vmovss(xmm0, dword[A1 + LDA3 * 1 - 0x80]);
        add_d(TM, A1, LDA3);
        ld_w(TM0, TM, -0x80);
        //vmovss(dword[B - 0x74], xmm0);
        st_w(TM0, B, -0x74);
        //vmovss(xmm0, dword[A2 - 0x80]);
        ld_w(TM0, A2, -0x80);
        //vmovss(dword[B - 0x70], xmm0);
        st_w(TM0, B, -0x70);
        //vmovss(xmm0, dword[A2 + LDA * 1 - 0x80]);
        add_d(TM, A2, LDA);
        ld_w(TM0, TM, -0x80);
        //vmovss(dword[B - 0x6c], xmm0);
        st_w(TM0, B, -0x6c);
        //vmovss(xmm0, dword[A2 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        ld_w(TM0, TM, -0x80);
        //vmovss(dword[B - 0x68], xmm0);
        st_w(TM0, B, -0x68);
        //vmovss(xmm0, dword[A2 + LDA3 * 1 - 0x80]);
        add_d(TM, A2, LDA3);
        ld_w(TM0, TM, -0x80);
        //vmovss(dword[B - 0x64], xmm0);
        st_w(TM0, B, -0x64);
        //lea(A1, ptr[A1 + LDA * 8]);
        mov_imm(TM, 8);
        mul_d(TM, TM, LDA);
        add_d(A1, A1, TM);
        //lea(A2, ptr[A2 + LDA * 8]);
        add_d(A2, A2, TM);
        //sub(B, -32);
        addi_d(B, B, 32);
        //dec(I);
        addi_d(I, I, -1);
        //jg(labels[48], T_NEAR);
        blt(zero, I, labels[48]);
        //align(4);

        L(labels[47]);
        //test(M, 0x4);
        andi(TM, M, 0x4);
        //jle(labels[46], T_NEAR);
        bge(zero, TM, labels[46]);
        //vmovss(xmm0, dword[A1 - 0x80]);
        ld_w(TM0, A1, -0x80);
        //vmovss(dword[B - 0x80], xmm0);
        st_w(TM0, B, -0x80);
        //vmovss(xmm0, dword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        ld_w(TM0, TM, -0x80);
        //vmovss(dword[B - 0x7c], xmm0);
        st_w(TM0, B, -0x7c);
        //vmovss(xmm0, dword[A1 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        ld_w(TM0, TM, -0x80);
        //vmovss(dword[B - 0x78], xmm0);
        st_w(TM0, B, -0x78);
        //vmovss(xmm0, dword[A1 + LDA3 * 1 - 0x80]);
        add_d(TM, A1, LDA3);
        ld_w(TM0, TM, -0x80);
        //vmovss(dword[B - 0x74], xmm0);
        st_w(TM0, B, -0x74);
        //lea(A1, ptr[A1 + LDA * 4]);
        mov_imm(TM, 4);
        mul_d(TM, TM, LDA);
        add_d(A1, A1, TM);
        //sub(B, -16);
        addi_d(B, B, 16);
        //align(4);

        L(labels[46]);
        //test(M, 0x2);
        andi(TM, M, 0x2);
        //jle(labels[45], T_NEAR);
        bge(zero, TM, labels[45]);
        //vmovss(xmm0, dword[A1 - 0x80]);
        ld_w(TM0, A1, -0x80);
        //vmovss(dword[B - 0x80], xmm0);
        st_w(TM0, B, -0x80);
        //vmovss(xmm0, dword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        ld_w(TM0, TM, -0x80);
        //vmovss(dword[B - 0x7c], xmm0);
        st_w(TM0, B, -0x7c);
        //lea(A1, ptr[A1 + LDA * 2]);
        add_d(A1, TM, LDA);
        //sub(B, -8);
        addi_d(B, B, 8);
        //align(4);

        L(labels[45]);
        //test(M, 0x1);
        andi(TM, M, 0x1);
        //jle(labels[44], T_NEAR);
        bge(zero, TM, labels[44]);
        //vmovss(xmm0, dword[A1 - 0x80]);
        ld_w(TM0, A1, -0x80);
        //vmovss(dword[B - 0x80], xmm0);
        st_w(TM0, B, -0x80);
        //sub(B, -4);
        addi_d(B, B, 4);
        //align(4);

        L(labels[44]);
        //sub(N, 0x1);
        addi_d(N, N, 0x1);
        //align(4);

        L(labels[43]);
        //jmp(labels[1], T_NEAR);
        b(labels[1]);
        //align(4);

        L(labels[42]);
        //vxorps(xmm3, xmm3, xmm4);
        vxor_v(vr3, vr3, vr4);
        //vucomiss(xmm6, xmm3);
        vfcmp_cne_s(vr31, vr6, vr3);
        vpickve2gr_w(TM, vr31, 0);
        //jne(labels[20], T_NEAR);
        bnez(TM, labels[20]);
        //vmovaps(ymm6, ymm4);
        xvbsll_v(xr6, xr4, 0);
        //cmp(N, 0x4);
        mov_imm(TM, 0x4);
        //jl(labels[34], T_NEAR);
        blt(N, TM, labels[34]);
        //align(4);

        L(labels[41]);
        //mov(A1, A);
        add_d(A1, A, zero);
        //lea(A2, ptr[A1 + LDA * 4]);
        mov_imm(TM, 4);
        mul_d(TM, TM, LDA);
        add_d(A2, A1, TM);
        //add(A, 0x10);
        addi_d(A, A, 0x10);
        //mov(I, M);
        add_d(I, zero, M);
        //sar(I, 0x3);
        srai_d(I, I, 0x3);
        //jle(labels[39], T_NEAR);
        bge(zero, I, labels[39]);
        //align(4);

        L(labels[40]);
        //vmovups(xmm0, xword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovups(xword[B - 0x80], xmm0);
        vst(vr0, B, -0x80);
        //vmovups(xmm0, xword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovups(xword[B - 0x70], xmm0);
        vst(vr0, B, -0x70);
        //vmovups(xmm0, xword[A1 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovups(xword[B - 0x60], xmm0);
        vst(vr0, B, -0x60);
        //vmovups(xmm0, xword[A1 + LDA3 * 1 - 0x80]);
        add_d(TM, A1, LDA3);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovups(xword[B - 0x50], xmm0);
        vst(vr0, B, -0x50);
        //vmovups(xmm0, xword[A2 - 0x80]);
        vld(vr0, A2, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovups(xword[B - 0x40], xmm0);
        vst(vr0, B, -0x40);
        //vmovups(xmm0, xword[A2 + LDA * 1 - 0x80]);
        add_d(TM, A2, LDA);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovups(xword[B - 0x30], xmm0);
        vst(vr0, B, -0x30);
        //vmovups(xmm0, xword[A2 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovups(xword[B - 0x20], xmm0);
        vst(vr0, B, -0x20);
        //vmovups(xmm0, xword[A2 + LDA3 * 1 - 0x80]);
        add_d(TM, A2, LDA3);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovups(xword[B - 0x10], xmm0);
        vst(vr0, B, -0x10);
        //lea(A1, ptr[A1 + LDA * 8]);
        mov_imm(TM, 8);
        mul_d(TM, TM, LDA);
        add_d(A1, A1, TM);
        //lea(A2, ptr[A2 + LDA * 8]);
        add_d(A2, A2, TM);
        //sub(B, -128);
        addi_d(B, B, 128);
        //dec(I);
        addi_d(I, I, -1);
        //jg(labels[40], T_NEAR);
        blt(zero, I, labels[40]);
        //align(4);

        L(labels[39]);
        //test(M, 0x4);
        andi(TM, M, 0x4);
        //jle(labels[38], T_NEAR);
        bge(zero, TM, labels[38]);
        //vmovups(xmm0, xword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovups(xword[B - 0x80], xmm0);
        vst(vr0, B, -0x80);
        //vmovups(xmm0, xword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovups(xword[B - 0x70], xmm0);
        vst(vr0, B, -0x70);
        //vmovups(xmm0, xword[A1 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovups(xword[B - 0x60], xmm0);
        vst(vr0, B, -0x60);
        //vmovups(xmm0, xword[A1 + LDA3 * 1 - 0x80]);
        add_d(TM, A1, LDA3);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovups(xword[B - 0x50], xmm0);
        vst(vr0, B, -0x50);
        //lea(A1, ptr[A1 + LDA * 4]);
        mov_imm(TM, 4);
        mul_d(TM, TM, LDA);
        add_d(A1, A1, TM);
        //sub(B, -64);
        addi_d(B, B, 64);
        //align(4);

        L(labels[38]);
        //test(M, 0x2);
        andi(TM, M, 0x2);
        //jle(labels[37], T_NEAR);
        bge(zero, TM, labels[37]);
        //vmovups(xmm0, xword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovups(xword[B - 0x80], xmm0);
        vst(vr0, B, -0x80);
        //vmovups(xmm0, xword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovups(xword[B - 0x70], xmm0);
        vst(vr0, B, -0x70);
        //lea(A1, ptr[A1 + LDA * 2]);
        add_d(A1, TM, LDA);
        //sub(B, -32);
        addi_d(B, B, 32);
        //align(4);

        L(labels[37]);
        //test(M, 0x1);
        andi(TM, M, 0x1);
        //jle(labels[35], T_NEAR);
        bge(zero, TM, labels[35]);
        //vmovups(xmm0, xword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovups(xword[B - 0x80], xmm0);
        vst(vr0, B, -0x80);
        //sub(B, -16);
        addi_d(B, B, 16);
        //align(4);

        L(labels[35]);
        //sub(N, 0x4);
        addi_d(N, N, -0x4);
        //cmp(N, 0x4);
        mov_imm(TM, 0x4);
        //jge(labels[41], T_NEAR);
        bge(N, TM, labels[41]);
        //align(4);

        L(labels[34]);
        //cmp(N, 0x2);
        mov_imm(TM, 0x2);
        //jl(labels[27], T_NEAR);
        blt(N, TM, labels[27]);
        //mov(A1, A);
        add_d(A1, A, zero);
        //lea(A2, ptr[A1 + LDA * 4]);
        mov_imm(TM, 4);
        mul_d(TM, TM, LDA);
        add_d(A2, A1, TM);
        //add(A, 0x8);
        addi_d(A, A, 0x8);
        //mov(I, M);
        add_d(I, M, zero);
        //sar(I, 0x3);
        srai_d(I, I, 0x3);
        //jle(labels[32], T_NEAR);
        bge(zero, I, labels[32]);
        //align(4);

        L(labels[33]);
        //vmovsd(xmm0, qword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x80], xmm0);
        vstelm_d(vr0, B, -0x80, 0);
        //vmovsd(xmm0, qword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x78], xmm0);
        vstelm_d(vr0, B, -0x78, 0);
        //vmovsd(xmm0, qword[A1 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x70], xmm0);
        vstelm_d(vr0, B, -0x70, 0);
        //vmovsd(xmm0, qword[A1 + LDA3 * 1 - 0x80]);
        add_d(TM, A1, LDA3);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x68], xmm0);
        vstelm_d(vr0, B, -0x68, 0);
        //vmovsd(xmm0, qword[A2 - 0x80]);
        vld(vr0, A2, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x60], xmm0);
        vstelm_d(vr0, B, -0x60, 0);
        //vmovsd(xmm0, qword[A2 + LDA * 1 - 0x80]);
        add_d(TM, A2, LDA);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x58], xmm0);
        vstelm_d(vr0, B, -0x58, 0);
        //vmovsd(xmm0, qword[A2 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x50], xmm0);
        vstelm_d(vr0, B, -0x50, 0);
        //vmovsd(xmm0, qword[A2 + LDA3 * 1 - 0x80]);
        add_d(TM, A2, LDA3);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x48], xmm0);
        vstelm_d(vr0, B, -0x48, 0);
        //lea(A1, ptr[A1 + LDA * 8]);
        mov_imm(TM, 8);
        mul_d(TM, TM, LDA);
        add_d(A1, A1, TM);
        //lea(A2, ptr[A2 + LDA * 8]);
        add_d(A2, A2, TM);
        //sub(B, -64);
        addi_d(B, B, 64);
        //dec(I);
        addi_d(I, I, -1);
        //jg(labels[33], T_NEAR);
        blt(zero, I, labels[33]);
        //align(4);

        L(labels[32]);
        //test(M, 0x4);
        andi(TM, M, 0x4);
        //jle(labels[31], T_NEAR);
        bge(zero, TM, labels[31]);
        //vmovsd(xmm0, qword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x80], xmm0);
        vstelm_d(vr0, B, -0x80, 0);
        //vmovsd(xmm0, qword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x78], xmm0);
        vstelm_d(vr0, B, -0x78, 0);
        //vmovsd(xmm0, qword[A1 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x70], xmm0);
        vstelm_d(vr0, B, -0x70, 0);
        //vmovsd(xmm0, qword[A1 + LDA3 * 1 - 0x80]);
        add_d(TM, A1, LDA3);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x68], xmm0);
        vstelm_d(vr0, B, -0x68, 0);
        //lea(A1, ptr[A1 + LDA * 4]);
        mov_imm(TM, 4);
        mul_d(TM, TM, LDA);
        add_d(A1, A1, TM);
        //sub(B, -32);
        addi_d(B, B, 32);
        //align(4);

        L(labels[31]);
        //test(M, 0x2);
        andi(TM, M, 0x2);
        //jle(labels[29], T_NEAR);
        bge(zero, TM, labels[29]);
        //vmovsd(xmm0, qword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x80], xmm0);
        vstelm_d(vr0, B, -0x80, 0);
        //vmovsd(xmm0, qword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x78], xmm0);
        vstelm_d(vr0, B, -0x78, 0);
        //lea(A1, ptr[A1 + LDA * 2]);
        add_d(A1, TM, LDA);
        //sub(B, -16);
        addi_d(B, B, 16);
        //align(4);

        L(labels[29]);
        //test(M, 0x1);
        andi(TM, M, 0x1);
        //jle(labels[28], T_NEAR);
        bge(zero, TM, labels[28]);
        //vmovsd(xmm0, qword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x80], xmm0);
        vstelm_d(vr0, B, -0x80, 0);
        //sub(B, -8);
        addi_d(B, B, 8);
        //align(4);

        L(labels[28]);
        //sub(N, 0x2);
        addi_d(N, N, -0x2);
        //align(4);

        L(labels[27]);
        //cmp(N, 0x1);
        mov_imm(TM, 0x1);
        //jl(labels[21], T_NEAR);
        blt(N, TM, labels[21]);
        //mov(A1, A);
        add_d(A1, A, zero);
        //lea(A2, ptr[A1 + LDA * 4]);
        mov_imm(TM, 4);
        mul_d(TM, TM, LDA);
        add_d(A2, A1, TM);
        //add(A, 0x4);
        addi_d(A, A, 0x4);
        //mov(I, M);
        add_d(I, M, zero);
        //sar(I, 0x3);
        srai_d(I, I, 0x3);
        //jle(labels[25], T_NEAR);
        bge(zero, I, labels[25]);
        //align(4);

        L(labels[26]);
        //vmovss(xmm0, dword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovss(dword[B - 0x80], xmm0);
        vstelm_w(vr0, B, -0x80, 0);
        //vmovss(xmm0, dword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovss(dword[B - 0x7c], xmm0);
        vstelm_w(vr0, B, -0x7c, 0);
        //vmovss(xmm0, dword[A1 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovss(dword[B - 0x78], xmm0);
        vstelm_w(vr0, B, -0x78, 0);
        //vmovss(xmm0, dword[A1 + LDA3 * 1 - 0x80]);
        add_d(TM, A1, LDA3);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovss(dword[B - 0x74], xmm0);
        vstelm_w(vr0, B, -0x74, 0);
        //vmovss(xmm0, dword[A2 - 0x80]);
        vld(vr0, A2, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovss(dword[B - 0x70], xmm0);
        vstelm_w(vr0, B, -0x70, 0);
        //vmovss(xmm0, dword[A2 + LDA * 1 - 0x80]);
        add_d(TM, A2, LDA);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovss(dword[B - 0x6c], xmm0);
        vstelm_w(vr0, B, -0x6c, 0);
        //vmovss(xmm0, dword[A2 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovss(dword[B - 0x68], xmm0);
        vstelm_w(vr0, B, -0x68, 0);
        //vmovss(xmm0, dword[A2 + LDA3 * 1 - 0x80]);
        add_d(TM, A2, LDA3);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovss(dword[B - 0x64], xmm0);
        vstelm_w(vr0, B, -0x64, 0);
        //lea(A1, ptr[A1 + LDA * 8]);
        mov_imm(TM, 8);
        mul_d(TM, TM, LDA);
        add_d(A1, A1, TM);
        //lea(A2, ptr[A2 + LDA * 8]);
        add_d(A2, A2, TM);
        //sub(B, -32);
        addi_d(B, B, 32);
        //dec(I);
        addi_d(I, I, -1);
        //jg(labels[26], T_NEAR);
        blt(zero, I, labels[26]);
        //align(4);

        L(labels[25]);
        //test(M, 0x4);
        andi(TM, M, 0x4);
        //jle(labels[24], T_NEAR);
        bge(zero, TM, labels[24]);
        //vmovss(xmm0, dword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovss(dword[B - 0x80], xmm0);
        vstelm_w(vr0, B, -0x80, 0);
        //vmovss(xmm0, dword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovss(dword[B - 0x7c], xmm0);
        vstelm_w(vr0, B, -0x7c, 0);
        //vmovss(xmm0, dword[A1 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovss(dword[B - 0x78], xmm0);
        vstelm_w(vr0, B, -0x78, 0);
        //vmovss(xmm0, dword[A1 + LDA3 * 1 - 0x80]);
        add_d(TM, A1, LDA3);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovss(dword[B - 0x74], xmm0);
        vstelm_w(vr0, B, -0x74, 0);
        //lea(A1, ptr[A1 + LDA * 4]);
        mov_imm(TM, 4);
        mul_d(TM, TM, LDA);
        add_d(A1, A1, TM);
        //sub(B, -16);
        addi_d(B, B, 16);
        //align(4);

        L(labels[24]);
        //test(M, 0x2);
        andi(TM, M, 0x2);
        //jle(labels[23], T_NEAR);
        bge(zero, TM, labels[23]);
        //vmovss(xmm0, dword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovss(dword[B - 0x80], xmm0);
        vstelm_w(vr0, B, -0x80, 0);
        //vmovss(xmm0, dword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        vld(vr0, TM, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovss(dword[B - 0x7c], xmm0);
        vstelm_w(vr0, B, -0x7c, 0);
        //lea(A1, ptr[A1 + LDA * 2]);
        add_d(A1, TM, LDA);
        //sub(B, -8);
        addi_d(B, B, 8);
        //align(4);

        L(labels[23]);
        //test(M, 0x1);
        andi(TM, M, 0x1);
        //jle(labels[22], T_NEAR);
        bge(zero, TM, labels[22]);
        //vmovss(xmm0, dword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vxorps(xmm0, xmm6, xmm0);
        vxor_v(vr0, vr6, vr0);
        //vmovss(dword[B - 0x80], xmm0);
        vstelm_w(vr0, B, -0x80, 0);
        //sub(B, -4);
        addi_d(B, B, 4);
        //align(4);

        L(labels[22]);
        //sub(N, 0x1);
        addi_d(N, N, -0x1);
        //align(4);

        L(labels[21]);
        //jmp(labels[1], T_NEAR);
        b(labels[1]);
        //align(4);

        L(labels[20]);
        //cmp(N, 0x4);
        mov_imm(TM, 0x4);
        //jl(labels[13], T_NEAR);
        blt(N, TM, labels[13]);
        //align(4);

        L(labels[19]);
        //mov(A1, A);
        add_d(A1, A, zero);
        //lea(A2, ptr[A1 + LDA * 4]);
        mov_imm(TM, 4);
        mul_d(TM, TM, LDA);
        add_d(A2, A1, TM);
        //add(A, 0x10);
        addi_d(A, A, 0x10);
        //mov(I, M);
        add_d(I, M, zero);
        //sar(I, 0x3);
        srai_d(I, I, 0x3);
        //jle(labels[17], T_NEAR);
        bge(zero, I, labels[17]);
        //align(4);

        L(labels[18]);
        //vmovups(xmm0, xword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovups(xword[B - 0x80], xmm0);
        vst(vr0, B, -0x80);
        //vmovups(xmm0, xword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        vld(vr0, TM, - 0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovups(xword[B - 0x70], xmm0);
        vst(vr0, B, -0x70);
        //vmovups(xmm0, xword[A1 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovups(xword[B - 0x60], xmm0);
        vst(vr0, B, -0x60);
        //vmovups(xmm0, xword[A1 + LDA3 * 1 - 0x80]);
        add_d(TM, A1, LDA3);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovups(xword[B - 0x50], xmm0);
        vst(vr0, B, -0x50);
        //vmovups(xmm0, xword[A2 - 0x80]);
        vld(vr0, A2, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovups(xword[B - 0x40], xmm0);
        vst(vr0, B, -0x40);
        //vmovups(xmm0, xword[A2 + LDA * 1 - 0x80]);
        add_d(TM, A2, LDA);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovups(xword[B - 0x30], xmm0);
        vst(vr0, B, -0x30);
        //vmovups(xmm0, xword[A2 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovups(xword[B - 0x20], xmm0);
        vst(vr0, B, -0x20);
        //vmovups(xmm0, xword[A2 + LDA3 * 1 - 0x80]);
        add_d(TM, A2, LDA3);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovups(xword[B - 0x10], xmm0);
        vst(vr0, B, -0x10);
        //lea(A1, ptr[A1 + LDA * 8]);
        mov_imm(TM, 8);
        mul_d(TM, TM, LDA);
        add_d(A1, A1, TM);
        //lea(A2, ptr[A2 + LDA * 8]);
        add_d(A2, A2, TM);
        //sub(B, -128);
        addi_d(B, B, 128);
        //dec(I);
        addi_d(I, I, -1);
        //jg(labels[18], T_NEAR);
        blt(zero, I, labels[18]);
        //align(4);

        L(labels[17]);
        //test(M, 0x4);
        andi(TM, M, 0x4);
        //jle(labels[16], T_NEAR);
        bge(zero, TM, labels[16]);
        //vmovups(xmm0, xword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovups(xword[B - 0x80], xmm0);
        vst(vr0, B, -0x80);
        //vmovups(xmm0, xword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovups(xword[B - 0x70], xmm0);
        vst(vr0, B, -0x70);
        //vmovups(xmm0, xword[A1 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovups(xword[B - 0x60], xmm0);
        vst(vr0, B, -0x60);
        //vmovups(xmm0, xword[A1 + LDA3 * 1 - 0x80]);
        add_d(TM, A1, LDA3);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovups(xword[B - 0x50], xmm0);
        vst(vr0, B, -0x50);
        //lea(A1, ptr[A1 + LDA * 4]);
        mov_imm(TM, 4);
        mul_d(TM, TM, LDA);
        add_d(A1, A1, TM);
        //sub(B, -64);
        addi_d(B, B, 64);
        //align(4);

        L(labels[16]);
        //test(M, 0x2);
        andi(TM, M, 0x2);
        //jle(labels[15], T_NEAR);
        bge(zero, TM, labels[15]);
        //vmovups(xmm0, xword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovups(xword[B - 0x80], xmm0);
        vst(vr0, B, -0x80);
        //vmovups(xmm0, xword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovups(xword[B - 0x70], xmm0);
        vst(vr0, B, -0x70);
        //lea(A1, ptr[A1 + LDA * 2]);
        add_d(A1, TM, LDA);
        //sub(B, -32);
        addi_d(B, B, 32);
        //align(4);

        L(labels[15]);
        //test(M, 0x1);
        andi(TM, M, 0x1);
        //jle(labels[14], T_NEAR);
        bge(zero, TM, labels[14]);
        //vmovups(xmm0, xword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovups(xword[B - 0x80], xmm0);
        vst(vr0, B, -0x80);
        //sub(B, -16);
        addi_d(B, B, 16);
        //align(4);

        L(labels[14]);
        //sub(N, 0x4);
        addi_d(N, N, -0x4);
        //cmp(N, 0x4);
        mov_imm(TM, 0x4);
        //jge(labels[19], T_NEAR);
        bge(N, TM, labels[19]);
        //align(4);

        L(labels[13]);
        //cmp(N, 0x2);
        mov_imm(TM, 0x2);
        //jl(labels[7], T_NEAR);
        blt(N, TM, labels[7]);
        //mov(A1, A);
        add_d(A1, A, zero);
        //lea(A2, ptr[A1 + LDA * 4]);
        mov_imm(TM, 4);
        mul_d(TM, TM, LDA);
        add_d(A2, A1, TM);
        //add(A, 0x8);
        addi_d(A, A, 0x8);
        //mov(I, M);
        add_d(I, M, zero);
        //sar(I, 0x3);
        srai_d(I, I, 0x3);
        //jle(labels[11], T_NEAR);
        bge(zero, I, labels[11]);
        //align(4);

        L(labels[12]);
        //vmovsd(xmm0, qword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x80], xmm0);
        vstelm_d(vr0, B, -0x80, 0);
        //vmovsd(xmm0, qword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x78], xmm0);
        vstelm_d(vr0, B, -0x78, 0);
        //vmovsd(xmm0, qword[A1 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x70], xmm0);
        vstelm_d(vr0, B, -0x70, 0);
        //vmovsd(xmm0, qword[A1 + LDA3 * 1 - 0x80]);
        add_d(TM, A1, LDA3);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x68], xmm0);
        vstelm_d(vr0, B, -0x68, 0);
        //vmovsd(xmm0, qword[A2 - 0x80]);
        vld(vr0, A2, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x60], xmm0);
        vstelm_d(vr0, B, -0x60, 0);
        //vmovsd(xmm0, qword[A2 + LDA * 1 - 0x80]);
        add_d(TM, A2, LDA);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x58], xmm0);
        vstelm_d(vr0, B, -0x58, 0);
        //vmovsd(xmm0, qword[A2 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x50], xmm0);
        vstelm_d(vr0, B, -0x50, 0);
        //vmovsd(xmm0, qword[A2 + LDA3 * 1 - 0x80]);
        add_d(TM, A2, LDA3);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x48], xmm0);
        vstelm_d(vr0, B, -0x48, 0);
        //lea(A1, ptr[A1 + LDA * 8]);
        mov_imm(TM, 8);
        mul_d(TM, TM, LDA);
        add_d(A1, A1, TM);
        //lea(A2, ptr[A2 + LDA * 8]);
        add_d(A2, A2, TM);
        //sub(B, -64);
        addi_d(B, B, 64);
        //dec(I);
        addi_d(I, I, -1);
        //jg(labels[12], T_NEAR);
        blt(zero, I, labels[12]);
        //align(4);

        L(labels[11]);
        //test(M, 0x4);
        andi(TM, M, 0x4);
        //jle(labels[10], T_NEAR);
        bge(zero, TM, labels[10]);
        //vmovsd(xmm0, qword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x80], xmm0);
        vstelm_d(vr0, B, -0x80, 0);
        //vmovsd(xmm0, qword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x78], xmm0);
        vstelm_d(vr0, B, -0x78, 0);
        //vmovsd(xmm0, qword[A1 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x70], xmm0);
        vstelm_d(vr0, B, -0x70, 0);
        //vmovsd(xmm0, qword[A1 + LDA3 * 1 - 0x80]);
        add_d(TM, A1, LDA3);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x68], xmm0);
        vstelm_d(vr0, B, -0x68, 0);
        //lea(A1, ptr[A1 + LDA * 4]);
        mov_imm(TM, 4);
        mul_d(TM, TM, LDA);
        add_d(A1, A1, TM);
        //sub(B, -32);
        addi_d(B, B, 32);
        //align(4);

        L(labels[10]);
        //test(M, 0x2);
        andi(TM, M, 0x2);
        //jle(labels[9], T_NEAR);
        bge(zero, TM, labels[9]);
        //vmovsd(xmm0, qword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x80], xmm0);
        vstelm_d(vr0, B, -0x80, 0);
        //vmovsd(xmm0, qword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x78], xmm0);
        vstelm_d(vr0, B, -0x78, 0);
        //lea(A1, ptr[A1 + LDA * 2]);
        add_d(A1, TM, LDA);
        //sub(B, -16);
        addi_d(B, B, 16);
        //align(4);

        L(labels[9]);
        //test(M, 0x1);
        andi(TM, M, 0x1);
        //jle(labels[8], T_NEAR);
        bge(zero, TM, labels[8]);
        //vmovsd(xmm0, qword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovlps(qword[B - 0x80], xmm0);
        vstelm_d(vr0, B, -0x80, 0);
        //sub(B, -8);
        addi_d(B, B, 8);
        //align(4);

        L(labels[8]);
        //sub(N, 0x2);
        addi_d(N, N, -0x2);
        //align(4);

        L(labels[7]);
        //cmp(N, 0x1);
        addi_d(TM, zero, 0x1);
        //jl(labels[1], T_NEAR);
        blt(N, TM, labels[1]);
        //mov(A1, A);
        add_d(A1, A, zero);
        //lea(A2, ptr[A1 + LDA * 4]);
        mov_imm(TM, 4);
        mul_d(TM, TM, LDA);
        add_d(A2, A1, TM);
        //add(A, 0x4);
        addi_d(A, A, 0x4);
        //mov(I, M);
        add_d(I, M, zero);
        //sar(I, 0x3);
        srai_d(I, I, 0x3);
        //jle(labels[5], T_NEAR);
        bge(zero, I, labels[5]);
        //align(4);

        L(labels[6]);
        //vmovss(xmm0, dword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovss(dword[B - 0x80], xmm0);
        vstelm_w(vr0, B, -0x80, 0);
        //vmovss(xmm0, dword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovss(dword[B - 0x7c], xmm0);
        vstelm_w(vr0, B, -0x7c, 0);
        //vmovss(xmm0, dword[A1 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovss(dword[B - 0x78], xmm0);
        vstelm_w(vr0, B, -0x78, 0);
        //vmovss(xmm0, dword[A1 + LDA3 * 1 - 0x80]);
        add_d(TM, A1, LDA3);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovss(dword[B - 0x74], xmm0);
        vstelm_w(vr0, B, -0x74, 0);
        //vmovss(xmm0, dword[A2 - 0x80]);
        vld(vr0, A2, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovss(dword[B - 0x70], xmm0);
        vstelm_w(vr0, B, -0x70, 0);
        //vmovss(xmm0, dword[A2 + LDA * 1 - 0x80]);
        add_d(TM, A2, LDA);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovss(dword[B - 0x6c], xmm0);
        vstelm_w(vr0, B, -0x6c, 0);
        //vmovss(xmm0, dword[A2 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovss(dword[B - 0x68], xmm0);
        vstelm_w(vr0, B, -0x68, 0);
        //vmovss(xmm0, dword[A2 + LDA3 * 1 - 0x80]);
        add_d(TM, A2, LDA3);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovss(dword[B - 0x64], xmm0);
        vstelm_w(vr0, B, -0x64, 0);
        //lea(A1, ptr[A1 + LDA * 8]);
        mov_imm(TM, 8);
        mul_d(TM, TM, LDA);
        add_d(A1, A1, TM);
        //lea(A2, ptr[A2 + LDA * 8]);
        add_d(A2, A2, TM);
        //sub(B, -32);
        addi_d(B, B, 32);
        //dec(I);
        addi_d(I, I, -1);
        //jg(labels[6], T_NEAR);
        blt(zero, I, labels[6]);
        //align(4);

        L(labels[5]);
        //test(M, 0x4);
        andi(TM, M, 0x4);
        //jle(labels[4], T_NEAR);
        bge(zero, TM, labels[4]);
        //vmovss(xmm0, dword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovss(dword[B - 0x80], xmm0);
        vstelm_w(vr0, B, -0x80, 0);
        //vmovss(xmm0, dword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovss(dword[B - 0x7c], xmm0);
        vstelm_w(vr0, B, -0x7c, 0);
        //vmovss(xmm0, dword[A1 + LDA * 2 - 0x80]);
        add_d(TM, TM, LDA);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovss(dword[B - 0x78], xmm0);
        vstelm_w(vr0, B, -0x78, 0);
        //vmovss(xmm0, dword[A1 + LDA3 * 1 - 0x80]);
        add_d(TM, A1, LDA3);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovss(dword[B - 0x74], xmm0);
        vstelm_w(vr0, B, -0x74, 0);
        //lea(A1, ptr[A1 + LDA * 4]);
        mov_imm(TM, 4);
        mul_d(TM, TM, LDA);
        add_d(A1, A1, TM);
        //sub(B, -16);
        addi_d(B, B, 16);
        //align(4);

        L(labels[4]);
        //test(M, 0x2);
        andi(TM, M, 0x2);
        //jle(labels[3], T_NEAR);
        bge(zero, TM, labels[3]);
        //vmovss(xmm0, dword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovss(dword[B - 0x80], xmm0);
        vstelm_w(vr0, B, -0x80, 0);
        //vmovss(xmm0, dword[A1 + LDA * 1 - 0x80]);
        add_d(TM, A1, LDA);
        vld(vr0, TM, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovss(dword[B - 0x7c], xmm0);
        vstelm_w(vr0, B, -0x7c, 0);
        //lea(A1, ptr[A1 + LDA * 2]);
        add_d(A1, TM, LDA);
        //sub(B, -8);
        addi_d(B, B, 8);
        //align(4);

        L(labels[3]);
        //test(M, 0x1);
        andi(TM, M, 0x1);
        //jle(labels[2], T_NEAR);
        bge(zero, TM, labels[2]);
        //vmovss(xmm0, dword[A1 - 0x80]);
        vld(vr0, A1, -0x80);
        //vmulps(xmm0, xmm6, xmm0);
        vfmul_s(vr0, vr6, vr0);
        //vmovss(dword[B - 0x80], xmm0);
        vstelm_w(vr0, B, -0x80, 0);
        //sub(B, -4);
        addi_d(B, B, 4);
        //align(4);

        L(labels[2]);
        //sub(N, 0x1);
        addi_d(N, N, -0x1);
        //align(4);

        L(labels[1]);

        postamble();
    }
    outLocalLabel();

#undef M
#undef N
#undef A
#undef LDA
#undef ALPHA
#undef B
#undef I
#undef A1
#undef A2
#undef LDA3
#undef TM
#undef TM0
#ifdef _WIN32
#undef ARG_ALPHA
#undef ARG_B
#endif
}

} // namespace loongarch64
} // namespace cpu
} // namespace impl
} // namespace dnnl
